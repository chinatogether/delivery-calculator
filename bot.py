import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery
from aiogram.types.web_app_data import WebAppData
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import json
import logging
import psycopg2
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://china-together.ru')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    try:
        return psycopg2.connect(
            dbname="delivery_db",
            user="chinatogether",
            password="O99ri1@",
            host="localhost",
            port="5432"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_action(telegram_id, action, details=None):
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO delivery_test.user_actions (telegram_user_id, action, details, created_at)
            VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
        """, (telegram_id, action, json.dumps(details) if details else None))
        conn.commit()
        cursor.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard(user_id, username):
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_url = f"{WEB_APP_URL}/?telegram_id={user_id}&username={username}"
    order_app_url = f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
            web_app=WebAppInfo(url=web_app_url)
        )],
        [InlineKeyboardButton(
            text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
            web_app=WebAppInfo(url=order_app_url)
        )],
        [InlineKeyboardButton(
            text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", 
            callback_data="my_requests"
        )],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å", 
            callback_data="help"
        )]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    first_name = message.from_user.first_name or ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_action(user_id, "start_command", {
        "username": username,
        "first_name": first_name
    })
    
    keyboard = get_main_keyboard(user_id, username)
    
    await message.reply(
        "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ China Together!</b>\n\n"
        "üì¶ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
        "üéØ <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
        "‚Ä¢ üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üöö –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–∫—É–ø –∏ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        "‚Ä¢ üìÇ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ ‚ùì –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        action = data.get('action', '')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        save_user_action(user_id, f"webapp_{action}", data)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
        if action == 'calculation_completed':
            await handle_calculation_completed(message, data, user_id, username)
        elif action == 'purchase_request_submitted':
            await handle_purchase_request_submitted(message, data, user_id, username)
        elif action == 'delivery_ordered':
            await handle_delivery_ordered(message, data, user_id, username)
        elif action == 'share_calculation':
            await handle_share_calculation(message, data, user_id, username)
        else:
            await message.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
async def handle_calculation_completed(message, data, user_id, username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞"""
    await message.reply(
        "‚úÖ <b>–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
        f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {data.get('totalWeight', 0)} –∫–≥\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ${data.get('productCost', 0)}\n\n"
        f"üí∏ <b>–õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
        f"üì¶ –ú–µ—à–æ–∫: ${data.get('bagTotalRegular', 0):.2f} / ${data.get('bagTotalFast', 0):.2f}\n"
        f"üìê –£–≥–æ–ª–∫–∏: ${data.get('cornersTotalRegular', 0):.2f} / ${data.get('cornersTotalFast', 0):.2f}\n"
        f"ü™µ –ö–∞—Ä–∫–∞—Å: ${data.get('frameTotalRegular', 0):.2f} / ${data.get('frameTotalFast', 0):.2f}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
                web_app=WebAppInfo(url=f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}")
            )],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
            [InlineKeyboardButton(text="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data="share_last_calculation")]
        ]),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∫—É–ø
async def handle_purchase_request_submitted(message, data, user_id, username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∫—É–ø"""
    await message.reply(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìß Email: {data.get('email', '')}\n"
        f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {data.get('order_amount', '')}\n"
        f"üì± Telegram: {data.get('telegram_contact', '')}\n\n"
        "üïê <b>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b>\n"
        "–ü–ù‚Äì–ü–¢ —Å 10:00 –¥–æ 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏\n\n"
        "üìû –ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: @manager_username",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞", callback_data="new_order")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
async def handle_delivery_ordered(message, data, user_id, username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    package_names = {
        'bag': 'üì¶ –ú–µ—à–æ–∫',
        'corners': 'üìê –ö–∞—Ä—Ç–æ–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏', 
        'frame': 'ü™µ –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å'
    }
    delivery_names = {
        'fast': 'üöÄ –ë—ã—Å—Ç—Ä–∞—è (5-7 –¥–Ω–µ–π)',
        'regular': 'üö¢ –û–±—ã—á–Ω–∞—è (10-14 –¥–Ω–µ–π)'
    }
    
    package_name = package_names.get(data.get('package_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    delivery_name = delivery_names.get(data.get('delivery_type', ''), '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    
    await message.reply(
        "‚úÖ <b>–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"üì¶ –£–ø–∞–∫–æ–≤–∫–∞: {package_name}\n"
        f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${data.get('total_cost', 0):.2f}\n"
        f"‚öñÔ∏è –í–µ—Å: {data.get('weight', 0)} –∫–≥\n"
        f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '')}\n\n"
        "üïê –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.\n\n"
        "üìû –í–æ–ø—Ä–æ—Å—ã? –ü–∏—à–∏—Ç–µ: @manager_username",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
        ]),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç–æ–º
async def handle_share_calculation(message, data, user_id, username):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç–æ–º"""
    share_text = data.get('text', '')
    await message.reply(
        f"üì§ <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç–æ–º:</b>\n\n{share_text}",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or f"user_{user_id}"
    
    # –ú–æ–∏ –∑–∞—è–≤–∫–∏
    if callback.data == "my_requests":
        requests = get_user_purchase_requests(user_id)
        if requests:
            requests_text = "<b>üìÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∫—É–ø:</b>\n\n"
            for i, req in enumerate(requests[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_emoji = {
                    'new': 'üÜï',
                    'in_review': 'üëÄ', 
                    'approved': '‚úÖ',
                    'rejected': '‚ùå',
                    'completed': 'üéâ'
                }.get(req['status'], '‚ùì')
                
                requests_text += (
                    f"{i}. {status_emoji} {req['created_at'][:16]}\n"
                    f"   üí∞ –°—É–º–º–∞: {req['order_amount']}\n"
                    f"   üìß Email: {req['email']}\n"
                    f"   üìä –°—Ç–∞—Ç—É—Å: {req['status']}\n\n"
                )
            await callback.message.answer(requests_text, parse_mode="HTML")
        else:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∫—É–ø.\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
                        web_app=WebAppInfo(url=f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}")
                    )]
                ])
            )
        
        save_user_action(user_id, "view_requests")
    
    # –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–¥–æ—Å—Ç–∞–≤–∫–∏)
    elif callback.data == "my_orders":
        orders = get_user_delivery_orders(user_id)
        if orders:
            orders_text = "<b>üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
            for i, order in enumerate(orders[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                status_emoji = {
                    'pending': '‚è≥',
                    'confirmed': '‚úÖ',
                    'in_progress': 'üöõ',
                    'delivered': 'üéâ',
                    'cancelled': '‚ùå'
                }.get(order['status'], '‚ùì')
                
                orders_text += (
                    f"{i}. {status_emoji} {order['created_at'][:16]}\n"
                    f"   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${order['total_cost']}\n"
                    f"   üì¶ –£–ø–∞–∫–æ–≤–∫–∞: {order['selected_package_type']}\n"
                    f"   üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order['selected_delivery_type']}\n\n"
                )
            await callback.message.answer(orders_text, parse_mode="HTML")
        else:
            await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏.")
        
        save_user_action(user_id, "view_orders")
    
    # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    elif callback.data == "new_calculation":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìä –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
                web_app=WebAppInfo(url=f"{WEB_APP_URL}/?telegram_id={user_id}&username={username}")
            )]
        ])
        await callback.message.answer(
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=keyboard
        )
        save_user_action(user_id, "new_calculation")
    
    # –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
    elif callback.data == "new_order":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
                web_app=WebAppInfo(url=f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}")
            )]
        ])
        await callback.message.answer(
            "üöö –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É:",
            reply_markup=keyboard
        )
        save_user_action(user_id, "new_order")
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif callback.data == "main_menu":
        keyboard = get_main_keyboard(user_id, username)
        await callback.message.answer(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        save_user_action(user_id, "main_menu")
    
    # –ü–æ–º–æ—â—å
    elif callback.data == "help":
        help_text = (
            "<b>‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º:</b>\n\n"
            "<b>üìä –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª\n"
            "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n\n"
            "<b>üöö –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª\n"
            "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É\n"
            "3Ô∏è‚É£ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n\n"
            "<b>üïê –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
            "–ü–ù‚Äì–ü–¢ —Å 10:00 –¥–æ 18:00 (–ú–°–ö)\n\n"
            "<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @manager_username\n"
            "<b>üí¨ –ì—Ä—É–ø–ø–∞:</b> @china_together_group"
        )
        await callback.message.answer(help_text, parse_mode="HTML")
        save_user_action(user_id, "view_help")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–∫—É–ø
def get_user_purchase_requests(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–∫—É–ø –∏–∑ –ë–î"""
    conn = connect_to_db()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT pr.*, u.telegram_id
            FROM delivery_test.purchase_requests pr
            JOIN delivery_test.telegram_users u ON pr.telegram_user_id = u.id
            WHERE u.telegram_id = %s
            ORDER BY pr.created_at DESC
            LIMIT 10
        """, (str(telegram_id),))
        
        columns = [desc[0] for desc in cursor.description]
        results = []
        for row in cursor.fetchall():
            record = dict(zip(columns, row))
            record['created_at'] = record['created_at'].strftime('%Y-%m-%d %H:%M')
            results.append(record)
        
        cursor.close()
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []
    finally:
        conn.close()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_delivery_orders(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    conn = connect_to_db()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT do.*, u.telegram_id
            FROM delivery_test.delivery_orders do
            JOIN delivery_test.telegram_users u ON do.telegram_user_id = u.id
            WHERE u.telegram_id = %s
            ORDER BY do.created_at DESC
            LIMIT 10
        """, (str(telegram_id),))
        
        columns = [desc[0] for desc in cursor.description]
        results = []
        for row in cursor.fetchall():
            record = dict(zip(columns, row))
            record['created_at'] = record['created_at'].strftime('%Y-%m-%d %H:%M')
            results.append(record)
        
        cursor.close()
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        return []
    finally:
        conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ webhook
async def delete_webhook():
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º webhook, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    await delete_webhook()
    
    logger.info("ü§ñ China Together Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üåê Web App URL: {WEB_APP_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
