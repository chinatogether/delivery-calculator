import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery
from aiogram.types.web_app_data import WebAppData
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import json
import logging
import psycopg2
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://china-together.ru')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    try:
        return psycopg2.connect(
            dbname="delivery_db",
            user="chinatogether",
            password="O99ri1@",
            host="localhost",
            port="5432"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_action(telegram_id, action, details=None):
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO delivery_test.user_actions (telegram_user_id, action, details, created_at)
            VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
        """, (telegram_id, action, json.dumps(details) if details else None))
        conn.commit()
        cursor.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard(user_id, username):
    web_app_url = f"{WEB_APP_URL}/?telegram_id={user_id}&username={username}"
    order_app_url = f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
            web_app=WebAppInfo(url=web_app_url)
        )],
        [InlineKeyboardButton(
            text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
            web_app=WebAppInfo(url=order_app_url)
        )],
        [InlineKeyboardButton(
            text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", 
            callback_data="my_requests"
        )],
        [InlineKeyboardButton(
            text="üì± –ë–æ–ª—å—à–µ –æ–ø—Ü–∏–π", 
            callback_data="more_options"
        )]
    ])
    return keyboard

def get_more_options_menu(user_id, username):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", 
            callback_data="contact_manager"
        )],
        [InlineKeyboardButton(
            text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤", 
            callback_data="calculation_history"
        )],
        [InlineKeyboardButton(
            text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", 
            callback_data="support"
        )],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å", 
            callback_data="help"
        )],
        [InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="back_to_main"
        )]
    ])
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò
def get_smart_response(message_text):
    text = message_text.lower()
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if any(word in text for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', 'hi', 'hello']):
        return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ China Together - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è! –ü–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"
    
    # –í–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏ —Ä–∞—Å—á–µ—Ç–∞—Ö
    elif any(word in text for word in ['–¥–æ—Å—Ç–∞–≤–∫–∞', '—Ä–∞—Å—á–µ—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ü–µ–Ω–∞', '—Ç–∞—Ä–∏—Ñ', '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä']):
        return ("üìä <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n"
                "–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ 'üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'. –í–∞–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:\n"
                "‚Ä¢ üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–æ–±—ã—á–Ω—ã–µ, —Ç–µ–∫—Å—Ç–∏–ª—å, –æ–¥–µ–∂–¥–∞, –æ–±—É–≤—å)\n"
                "‚Ä¢ ‚öñÔ∏è –í–µ—Å –∏ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–±–∫–∏\n"
                "‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞\n"
                "‚Ä¢ üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫\n\n"
                "–£ –Ω–∞—Å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏: –º–µ—à–æ–∫, –∫–∞—Ä—Ç–æ–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏, –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å.\n"
                "2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: –±—ã—Å—Ç—Ä–∞—è (5-7 –¥–Ω–µ–π) –∏ –æ–±—ã—á–Ω–∞—è (10-14 –¥–Ω–µ–π).")
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏
    elif any(word in text for word in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä', 'thanks', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ']):
        return "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥—ã –ø–æ–º–æ—á—å! China Together –≤—Å–µ–≥–¥–∞ –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º. –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å. –£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –≤ –ö–∏—Ç–∞–µ! üá®üá≥"
    
    # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    else:
        return ("ü§î <b>–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!</b>\n\n"
                "üéØ <b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                "üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
                "üöö –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏ –≤—ã–∫—É–ø —Ç–æ–≤–∞—Ä–æ–≤\n"
                "üìÇ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
                "üí¨ –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏\n"
                "‚ùì –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å!")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    first_name = message.from_user.first_name or ""
    
    save_user_action(user_id, "start_command", {
        "username": username,
        "first_name": first_name
    })
    
    keyboard = get_main_keyboard(user_id, username)
    
    await message.reply(
        f"üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!</b>\n\n"
        "–Ø —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ China Together - –ø–æ–º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –ö–∏—Ç–∞—è –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!\n\n"
        "üéØ <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ üìä –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üöö –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∫—É–ø —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚Ä¢ üìÇ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n"
        "‚Ä¢ üí¨ –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üë®‚Äçüíº –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏\n\n"
        "üí° <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_text_message(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    text = message.text
    
    save_user_action(user_id, "text_message", {"text": text})
    
    smart_response = get_smart_response(text)
    keyboard = get_main_keyboard(user_id, username)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
    if any(word in text.lower() for word in ['–º–µ–Ω–µ–¥–∂–µ—Ä', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å']):
        keyboard = get_more_options_menu(user_id, username)
    
    await message.reply(
        smart_response,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        username = message.from_user.username or f"user_{user_id}"
        action = data.get('action', '')
        
        save_user_action(user_id, f"webapp_{action}", data)
        
        if action == 'calculation_completed':
            await handle_calculation_completed(message, data, user_id, username)
        elif action == 'purchase_request_submitted':
            await handle_purchase_request_submitted(message, data, user_id, username)
        else:
            await message.reply("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
async def handle_calculation_completed(message, data, user_id, username):
    await message.reply(
        "‚úÖ <b>–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
        f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {data.get('totalWeight', 0)} –∫–≥\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ${data.get('productCost', 0)}\n\n"
        "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
                web_app=WebAppInfo(url=f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}")
            )],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")]
        ]),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
async def handle_purchase_request_submitted(message, data, user_id, username):
    await message.reply(
        "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {data.get('order_amount', '')}\n"
        f"üì± Telegram: {data.get('telegram_contact', '')}\n\n"
        "üïê <b>–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b>\n"
        "–ü–ù‚Äì–ü–¢ —Å 10:00 –¥–æ 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or f"user_{user_id}"
    
    # –ë–æ–ª—å—à–µ –æ–ø—Ü–∏–π
    if callback.data == "more_options":
        keyboard = get_more_options_menu(user_id, username)
        await callback.message.edit_text(
            "üì± <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</b>\n\n"
            "üí¨ <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b> - –ø—Ä—è–º–∞—è —Å–≤—è–∑—å —Å –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º\n"
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤</b> - –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã\n"
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b> - –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
            "‚ùì <b>–ü–æ–º–æ—â—å</b> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        save_user_action(user_id, "more_options_opened")
    
    # –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
    elif callback.data == "back_to_main":
        keyboard = get_main_keyboard(user_id, username)
        await callback.message.edit_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        save_user_action(user_id, "back_to_main")
    
    # –°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    elif callback.data == "contact_manager":
        manager_text = (
            "üë®‚Äçüíº <b>–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
            "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º:\n\n"
            "üéØ <b>–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä:</b> @manager_username\n"
            "üí¨ <b>–û–±—â–∏–π —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> @china_together_support\n"
            "üìß <b>Email:</b> manager@china-together.com\n\n"
            "üïê <b>–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è:</b>\n"
            "–ü–ù‚Äì–ü–¢ —Å 10:00 –¥–æ 18:00 (–ú–°–ö)\n"
            "üá®üá≥ –í –ö–∏—Ç–∞–µ: 15:00 –¥–æ 23:00\n\n"
            "‚ö° <b>–î–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:</b> @manager_username"
        )
        await callback.message.answer(manager_text, parse_mode="HTML")
        save_user_action(user_id, "manager_contact_viewed")
    
    # –ú–æ–∏ –∑–∞—è–≤–∫–∏
    elif callback.data == "my_requests":
        requests = get_user_purchase_requests(user_id)
        if requests:
            requests_text = "<b>üìÇ –í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–∫—É–ø:</b>\n\n"
            for i, req in enumerate(requests[:5], 1):
                status_emoji = {
                    'new': 'üÜï', 'in_review': 'üëÄ', 'approved': '‚úÖ',
                    'rejected': '‚ùå', 'completed': 'üéâ'
                }.get(req['status'], '‚ùì')
                
                requests_text += (
                    f"{i}. {status_emoji} {req['created_at'][:16]}\n"
                    f"   üí∞ –°—É–º–º–∞: {req['order_amount']}\n"
                    f"   üìß Email: {req['email']}\n\n"
                )
            await callback.message.answer(requests_text, parse_mode="HTML")
        else:
            await callback.message.answer(
                "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–∫—É–ø.\n\n"
                "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üöö –ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É", 
                        web_app=WebAppInfo(url=f"{WEB_APP_URL}/order?telegram_id={user_id}&username={username}")
                    )]
                ])
            )
        save_user_action(user_id, "view_requests")
    
    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    elif callback.data == "support":
        support_text = (
            "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ China Together</b>\n\n"
            "–ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º:\n\n"
            "üìû <b>–ú–µ–Ω–µ–¥–∂–µ—Ä:</b> @manager_username\n"
            "üí¨ <b>–ì—Ä—É–ø–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b> @china_together_support\n"
            "üìß <b>Email:</b> support@china-together.com\n\n"
            "üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
            "–ü–ù‚Äì–ü–¢ —Å 10:00 –¥–æ 18:00 (–ú–°–ö)\n\n"
            "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è —Å–≤—è–∑—å:</b> –Ω–∞–ø–∏—à–∏—Ç–µ @manager_username"
        )
        await callback.message.answer(support_text, parse_mode="HTML")
        save_user_action(user_id, "support_contacted")
    
    # –ü–æ–º–æ—â—å
    elif callback.data == "help":
        help_text = (
            "<b>‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º:</b>\n\n"
            "<b>üìä –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª\n"
            "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n\n"
            "<b>üöö –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É¬ª\n"
            "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É\n"
            "3Ô∏è‚É£ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n\n"
            "<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @manager_username"
        )
        await callback.message.answer(help_text, parse_mode="HTML")
        save_user_action(user_id, "view_help")
    
    # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    elif callback.data == "new_calculation":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìä –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
                web_app=WebAppInfo(url=f"{WEB_APP_URL}/?telegram_id={user_id}&username={username}")
            )]
        ])
        await callback.message.answer(
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=keyboard
        )
        save_user_action(user_id, "new_calculation")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–∫—É–ø
def get_user_purchase_requests(telegram_id):
    conn = connect_to_db()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT pr.*, u.telegram_id
            FROM delivery_test.purchase_requests pr
            JOIN delivery_test.telegram_users u ON pr.telegram_user_id = u.id
            WHERE u.telegram_id = %s
            ORDER BY pr.created_at DESC
            LIMIT 10
        """, (str(telegram_id),))
        
        columns = [desc[0] for desc in cursor.description]
        results = []
        for row in cursor.fetchall():
            record = dict(zip(columns, row))
            record['created_at'] = record['created_at'].strftime('%Y-%m-%d %H:%M')
            results.append(record)
        
        cursor.close()
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return []
    finally:
        conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ webhook
async def delete_webhook():
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await delete_webhook()
    logger.info("ü§ñ China Together Bot –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üåê Web App URL: {WEB_APP_URL}")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
