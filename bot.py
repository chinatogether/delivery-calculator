import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, CallbackQuery
from aiogram.types.web_app_data import WebAppData
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os
import json
import logging
import psycopg2
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_TOKEN = os.getenv('API_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'http://84.201.187.187:8061')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    try:
        return psycopg2.connect(
            dbname="delivery_db",
            user="chinatogether",
            password="O99ri1@",
            host="localhost",
            port="5432"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_action(telegram_id, action, details=None):
    conn = connect_to_db()
    if not conn:
        return
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO delivery_test.user_actions (telegram_user_id, action, details, created_at)
            VALUES (%s, %s, %s, CURRENT_TIMESTAMP)
        """, (telegram_id, action, json.dumps(details) if details else None))
        conn.commit()
        cursor.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {e}")
    finally:
        conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard(user_id, username):
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_url = f"{WEB_APP_URL}/?telegram_id={user_id}&username={username}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üìä –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 
            web_app=WebAppInfo(url=web_app_url)
        )],
        [InlineKeyboardButton(
            text="üìÇ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤", 
            callback_data="history"
        )],
        [InlineKeyboardButton(
            text="‚ùì –ü–æ–º–æ—â—å", 
            callback_data="help"
        )]
    ])
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_user_action(user_id, "start_command", {"username": username})
    
    keyboard = get_main_keyboard(user_id, username)
    
    await message.reply(
        "üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ China Together!</b>\n\n"
        "üì¶ –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        save_user_action(user_id, "calculation_completed", data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply(
            "‚úÖ <b>–†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"‚öñÔ∏è –û–±—â–∏–π –≤–µ—Å: {data.get('totalWeight', 0)} –∫–≥\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ${data.get('productCost', 0)}\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ CSV", callback_data=f"save_csv:{message.web_app_data.data}")],
                [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç", callback_data="new_calculation")],
                [InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤", callback_data="history")]
            ]),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username or f"user_{user_id}"
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ CSV
    if callback.data.startswith("save_csv:"):
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_json = callback.data.replace("save_csv:", "")
            data = json.loads(data_json)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
            csv_content = generate_csv(data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            from io import BytesIO
            csv_file = BytesIO(csv_content.encode('utf-8'))
            csv_file.name = f"calculation_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            await callback.message.answer_document(
                document=types.BufferedInputFile(
                    file=csv_file.getvalue(),
                    filename=csv_file.name
                ),
                caption="üìÑ –í–∞—à —Ä–∞—Å—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ CSV —Ñ–∞–π–ª–µ."
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            save_user_action(user_id, "csv_saved", {"filename": csv_file.name})
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞", show_alert=True)
    
    # –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤
    elif callback.data == "history":
        history = get_user_history(user_id)
        if history:
            history_text = "<b>üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤:</b>\n\n"
            for i, calc in enumerate(history[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
                history_text += (
                    f"{i}. {calc['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {calc['category']}\n"
                    f"   –í–µ—Å: {calc['total_weight']} –∫–≥\n"
                    f"   –ú–µ—à–æ–∫ (–±—ã—Å—Ç—Ä–æ): ${calc['bag_total_fast']}\n\n"
                )
            await callback.message.answer(history_text, parse_mode="HTML")
        else:
            await callback.message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.")
        
        save_user_action(user_id, "view_history")
    
    # –ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
    elif callback.data == "new_calculation":
        keyboard = get_main_keyboard(user_id, username)
        await callback.message.answer(
            "üîÑ –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç:",
            reply_markup=keyboard
        )
        save_user_action(user_id, "new_calculation")
    
    # –ü–æ–º–æ—â—å
    elif callback.data == "help":
        help_text = (
            "<b>‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º:</b>\n\n"
            "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä¬ª\n"
            "2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–†–∞—Å—Å—á–∏—Ç–∞—Ç—å¬ª\n"
            "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n"
            "5Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ CSV\n\n"
            "<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username"
        )
        await callback.message.answer(help_text, parse_mode="HTML")
        save_user_action(user_id, "view_help")
    
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV
def generate_csv(data):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–∞"""
    csv_lines = [
        "–ü–∞—Ä–∞–º–µ—Ç—Ä,–ó–Ω–∞—á–µ–Ω–∏–µ",
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è,{data.get('category', '')}",
        f"–û–±—â–∏–π –≤–µ—Å (–∫–≥),{data.get('totalWeight', '')}",
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å (–∫–≥/–º¬≥),{data.get('density', '')}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ ($),{data.get('productCost', '')}",
        f"–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ (%),{data.get('insuranceRate', '')}",
        f"–°—É–º–º–∞ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ ($),{data.get('insuranceAmount', '')}",
        f"–û–±—ä–µ–º (–º¬≥),{data.get('volume', '')}",
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫,{data.get('boxCount', '')}",
        "",
        "–¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏,–ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ($),–û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ($)",
        f"–ú–µ—à–æ–∫,{data.get('bagTotalFast', '')},{data.get('bagTotalRegular', '')}",
        f"–ö–∞—Ä—Ç–æ–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏,{data.get('cornersTotalFast', '')},{data.get('cornersTotalRegular', '')}",
        f"–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å,{data.get('frameTotalFast', '')},{data.get('frameTotalRegular', '')}"
    ]
    
    return "\n".join(csv_lines)

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_history(telegram_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    conn = connect_to_db()
    if not conn:
        return []
    
    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT c.*, u.telegram_id
            FROM delivery_test.user_calculations c
            JOIN delivery_test.telegram_users u ON c.telegram_user_id = u.id
            WHERE u.telegram_id = %s
            ORDER BY c.created_at DESC
            LIMIT 10
        """, (str(telegram_id),))
        
        columns = [desc[0] for desc in cursor.description]
        results = []
        for row in cursor.fetchall():
            results.append(dict(zip(columns, row)))
        
        cursor.close()
        return results
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        return []
    finally:
        conn.close()

# –£–¥–∞–ª–µ–Ω–∏–µ webhook
async def delete_webhook():
    await bot.delete_webhook()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º webhook, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    await delete_webhook()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
