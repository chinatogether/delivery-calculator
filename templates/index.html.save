            background: rgba(39, 174, 96, 0.1);
            border-radius: 6px;
            text-align: center;
        }
        
        /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ features –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
        .features {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 12px;
            margin-bottom: 20px;
        }
        
        .feature {
            text-align: center;
            padding: 12px 8px;
            background: rgba(231, 76, 60, 0.05);
            border-radius: 8px;
        }
        
        .feature-icon {
            font-size: 2rem;
            margin-bottom: 4px;
        }
        
        .feature h3 {
            font-size: 0.85rem;
            font-weight: 500;
            margin-bottom: 0;
        }
        
        .feature p {
            display: none; /* –°–∫—Ä—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */
        }
        
        @media (min-width: 480px) {
            .feature p {
                display: block;
                font-size: 0.8rem;
                color: var(--tg-theme-hint-color);
                margin-top: 4px;
            }
        }
        
        /* Telegram Web App —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        .tg-info {
            background: rgba(52, 152, 219, 0.1);
            padding: 12px;
            border-radius: 8px;
            margin-bottom: 16px;
            font-size: 0.9rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è Telegram Web App */
        @media (max-width: 480px) {
            .container {
                padding: 12px;
            }
            
            .card {
                padding: 16px;
            }
            
            h1 {
                font-size: 1.5rem;
            }
            
            .section-title {
                font-size: 1rem;
            }
        }
        
        /* –¢–µ–º–Ω–∞—è —Ç–µ–º–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ Telegram) */
        @media (prefers-color-scheme: dark) {
            :root {
                --tg-theme-bg-color: #1a1a1a;
                --tg-theme-text-color: #ffffff;
                --white: #2a2a2a;
                --border-color: #3a3a3a;
            }
            
            .card {
                background: #2a2a2a;
            }
            
            input, select {
                background: #1a1a1a;
                border-color: #3a3a3a;
                color: #ffffff;
            }
            
            .feature {
                background: rgba(231, 76, 60, 0.1);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">CT</div>
            <h1>China Together</h1>
            <p class="subtitle">–†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è</p>
        </div>
        
        <div class="features">
            <div class="feature">
                <div class="feature-icon">üì¶</div>
                <h3>–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç</h3>
                <p>–í—Å–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏</p>
            </div>
            <div class="feature">
                <div class="feature-icon">üöÄ</div>
                <h3>–ë—ã—Å—Ç—Ä–æ</h3>
                <p>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç</p>
            </div>
            <div class="feature">
                <div class="feature-icon">üìä</div>
                <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
                <p>–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é</p>
            </div>
        </div>
        
        <div class="card">
            <div class="tg-info" id="userInfo">
                <span>üí¨</span>
                <span id="userInfoText">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...</span>
            </div>
            
            <form id="deliveryForm">
                <div class="form-section">
                    <h2 class="section-title">
                        <span>üìã</span>
                        <span>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</span>
                    </h2>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞:</label>
                            <select id="category" name="category" required>
                                <option value="" disabled selected>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                <option value="–û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã">üì¶ –û–±—ã—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</option>
                                <option value="–¢–µ–∫—Å—Ç–∏–ª—å">üßµ –¢–µ–∫—Å—Ç–∏–ª—å</option>
                                <option value="–û–¥–µ–∂–¥–∞">üëï –û–¥–µ–∂–¥–∞</option>
                                <option value="–û–±—É–≤—å">üëü –û–±—É–≤—å</option>
                                <option value="–ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ">üëô –ù–∏–∂–Ω–µ–µ –±–µ–ª—å–µ</option>
                            </select>
                            <div id="categoryError" class="error-message">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–æ–±–æ–∫:</label>
                            <div class="input-group">
                                <input type="number" id="quantity" name="quantity" min="1" required placeholder="1" value="1">
                                <span class="input-icon">üì¶</span>
                            </div>
                            <div id="quantityError" class="error-message">–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2 class="section-title">
                        <span>‚öñÔ∏è</span>
                        <span>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–æ–±–∫–∏</span>
                    </h2>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="weight">–í–µ—Å (–∫–≥):</label>
                            <div class="input-group">
                                <input type="number" id="weight" name="weight" min="0.1" step="0.01" required placeholder="5.5">
                                <span class="input-icon">‚öñÔ∏è</span>
                            </div>
                            <div id="weightError" class="error-message">–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="cost">–°—Ç–æ–∏–º–æ—Å—Ç—å ($):</label>
                            <div class="input-group">
                                <input type="number" id="cost" name="cost" min="0.01" step="0.01" required placeholder="100">
                                <span class="input-icon">üí∞</span>
                            </div>
                            <div id="costError" class="error-message">–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
                        </div>
                    </div>
                </div>
                
                <div class="form-section">
                    <h2 class="section-title">
                        <span>üìè</span>
                        <span>–†–∞–∑–º–µ—Ä—ã –∫–æ—Ä–æ–±–∫–∏ (—Å–º)</span>
                    </h2>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="length">–î–ª–∏–Ω–∞:</label>
                            <input type="number" id="length" name="length" min="1" step="0.1" required placeholder="30">
                            <div id="lengthError" class="error-message">–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="width">–®–∏—Ä–∏–Ω–∞:</label>
                            <input type="number" id="width" name="width" min="1" step="0.1" required placeholder="20">
                            <div id="widthError" class="error-message">–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É</div>
                        </div>
                        
                        <div class="form-group">
                            <label for="height">–í—ã—Å–æ—Ç–∞:</label>
                            <input type="number" id="height" name="height" min="1" step="0.1" required placeholder="15">
                            <div id="heightError" class="error-message">–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É</div>
                        </div>
                    </div>
                </div>
                
                <button type="submit" class="btn" id="calculateBtn">
                    <span>üßÆ</span>
                    <span>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>
                </button>
                
                <div id="loading" class="loading">
                    <div class="spinner"></div>
                    <p><strong>–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç...</strong></p>
                    <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ—ã</p>
                </div>
                
                <div id="successMessage" class="success-message">
                    ‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...
                </div>
            </form>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let telegramUserId = null;
        let telegramUsername = null;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            // –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram Web App
            telegramUserId = tg.initDataUnsafe.user.id;
            telegramUsername = tg.initDataUnsafe.user.username || `user_${tg.initDataUnsafe.user.id}`;
        } else {
            // –î–∞–Ω–Ω—ã–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            const urlParams = new URLSearchParams(window.location.search);
            telegramUserId = urlParams.get('telegram_id') || 'test_user';
            telegramUsername = urlParams.get('username') || 'test_username';
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        if (tg.themeParams) {
            document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
            document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
            document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
            document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#E74C3C');
            document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('deliveryForm');
            const loadingElement = document.getElementById('loading');
            const calculateBtn = document.getElementById('calculateBtn');
            const successMessage = document.getElementById('successMessage');
            
            // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            function validateForm() {
                let isValid = true;
                const fields = [
                    { id: 'category', validator: (val) => val !== '', message: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' },
                    { id: 'weight', validator: (val) => !isNaN(val) && parseFloat(val) >= 0.1, message: '–ú–∏–Ω–∏–º—É–º 0.1 –∫–≥' },
                    { id: 'length', validator: (val) => !isNaN(val) && parseFloat(val) >= 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–º' },
                    { id: 'width', validator: (val) => !isNaN(val) && parseFloat(val) >= 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–º' },
                    { id: 'height', validator: (val) => !isNaN(val) && parseFloat(val) >= 1, message: '–ú–∏–Ω–∏–º—É–º 1 —Å–º' },
                    { id: 'cost', validator: (val) => !isNaN(val) && parseFloat(val) >= 0.01, message: '–ú–∏–Ω–∏–º—É–º $0.01' },
                    { id: 'quantity', validator: (val) => !isNaN(val) && parseInt(val) >= 1, message: '–ú–∏–Ω–∏–º—É–º 1' }
                ];
                
                fields.forEach(field => {
                    const element = document.getElementById(field.id);
                    const errorElement = document.getElementById(`${field.id}Error`);
                    const value = element.value.trim();
                    
                    if (!field.validator(value)) {
                        errorElement.textContent = field.message;
                        errorElement.style.display = 'block';
                        element.style.borderColor = '#dc3545';
                        isValid = false;
                    } else {
                        errorElement.style.display = 'none';
                        element.style.borderColor = 'var(--border-color)';
                    }
                });
                
                return isValid;
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            form.addEventListener('submit', async function(event) {
                event.preventDefault();
                
                if (!validateForm()) {
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
                    if (tg && tg.HapticFeedback) {
                        tg.HapticFeedback.notificationOccurred('error');
                    }
                    return;
                }
                
                try {
                    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—á–µ—Ç–∞
                    if (tg && tg.HapticFeedback) {
                        tg.HapticFeedback.impactOccurred('medium');
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                    loadingElement.style.display = 'block';
                    calculateBtn.disabled = true;
                    calculateBtn.innerHTML = '<span>‚è≥</span><span>–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—á–µ—Ç...</span>';
                    successMessage.style.display = 'none';
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
                    const formData = {
                        category: encodeURIComponent(document.getElementById('category').value),
                        weight: encodeURIComponent(parseFloat(document.getElementById('weight').value)),
                        length: encodeURIComponent(parseFloat(document.getElementById('length').value)),
                        width: encodeURIComponent(parseFloat(document.getElementById('width').value)),
                        height: encodeURIComponent(parseFloat(document.getElementById('height').value)),
                        cost: encodeURIComponent(parseFloat(document.getElementById('cost').value)),
                        quantity: encodeURIComponent(parseInt(document.getElementById('quantity').value)),
                        telegram_id: telegramUserId,
                        username: telegramUsername
                    };
                    
                    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
                    const queryString = Object.keys(formData)
                        .map(key => `${key}=${formData[key]}`)
                        .join('&');
                    const url = `/calculate?${queryString}`;
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
                    const response = await fetch(url, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                    });
                    
                    if (!response.ok) {
                        throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
                    if (response.redirected) {
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                        successMessage.style.display = 'block';
                        
                        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç
                        const resultUrl = new URL(response.url);
                        const resultsParam = resultUrl.searchParams.get('results');
                        if (resultsParam) {
                            const results = JSON.parse(decodeURIComponent(resultsParam));
                            
                            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
                            const dataForBot = {
                                category: results.generalInformation.category,
                                totalWeight: results.generalInformation.weight,
                                density: results.generalInformation.density,
                                productCost: results.generalInformation.productCost,
                                insuranceRate: results.generalInformation.insuranceRate,
                                insuranceAmount: results.generalInformation.insuranceAmount,
                                volume: results.generalInformation.volume,
                                boxCount: results.generalInformation.boxCount,
                                bagTotalFast: results.bag.totalFast,
                                bagTotalRegular: results.bag.totalRegular,
                                cornersTotalFast: results.corners.totalFast,
                                cornersTotalRegular: results.corners.totalRegular,
                                frameTotalFast: results.frame.totalFast,
                                frameTotalRegular: results.frame.totalRegular
                            };
                            
                            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram –±–æ—Ç
                            if (tg && tg.sendData) {
                                tg.sendData(JSON.stringify(dataForBot));
                            }
                        }
                        
                        // –í–∏–±—Ä–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
                        if (tg && tg.HapticFeedback) {
                            tg.HapticFeedback.notificationOccurred('success');
                        }
                        
                        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        setTimeout(() => {
                            window.location.href = response.url;
                        }, 1500);
                        
                        return;
                    }
                    
                    const data = await response.json();
                    
                    if (data.error) {
                        throw new Error(data.error);
                    }
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞:', error);
                    
                    // –í–∏–±—Ä–∞—Ü–∏—è –æ—à–∏–±–∫–∏
                    if (tg && tg.HapticFeedback) {
                        tg.HapticFeedback.notificationOccurred('error');
                    }
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                    if (tg && tg.showAlert) {
                        try {
                            tg.showAlert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                        } catch (e) {
                            // –ï—Å–ª–∏ showAlert –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert
                            alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                        }
                    } else {
                        alert(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${error.message}`);
                    }
                } finally {
                    loadingElement.style.display = 'none';
                    calculateBtn.disabled = false;
                    calculateBtn.innerHTML = '<span>üßÆ</span><span>–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å</span>';
                }
            });
            
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
            document.querySelectorAll('input, select').forEach(element => {
                element.addEventListener('input', function() {
                    const errorElement = document.getElementById(`${this.id}Error`);
                    if (errorElement && errorElement.style.display === 'block') {
                        errorElement.style.display = 'none';
                        this.style.borderColor = 'var(--border-color)';
                    }
                });
                
                element.addEventListener('blur', function() {
                    validateForm();
                });
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
            if (tg && tg.BackButton) {
                tg.BackButton.show();
                tg.BackButton.onClick(() => {
                    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏? –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã.')) {
                        tg.close();
                    }
                });
            }
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ submit)
            if (tg && tg.MainButton) {
                tg.MainButton.text = "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å";
                tg.MainButton.color = "#E74C3C";
                tg.MainButton.textColor = "#ffffff";
                tg.MainButton.show();
                
                tg.MainButton.onClick(() => {
                    form.dispatchEvent(new Event('submit'));
                });
            }
        });
    </script>
</body>
</html>
