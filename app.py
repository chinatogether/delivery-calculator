from flask import Flask, request, redirect, send_from_directory, render_template_string, render_template
import os
from datetime import datetime
import psycopg2

app = Flask(__name__, template_folder='templates')

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "/home/chinatogether/xlsx-files"
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# –§–∞–π–ª –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
LAST_FILE_INFO = "/home/chinatogether/xlsx-files/last_file_info.txt"

# –°—Ç–∏–ª–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ index)
PAGE_STYLE = '''
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
        margin: 20px;
    }
    h1 {
        color: #333;
    }
    a.button {
        display: inline-block;
        padding: 10px 20px;
        margin-top: 10px;
        background-color: red;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }
    a.button:hover {
        background-color: darkred;
    }
    .file-info {
        margin-top: 20px;
        background: #fff;
        padding: 15px;
        border-radius: 6px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }
    form {
        margin-top: 20px;
    }
    input[type="submit"] {
        background-color: red;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }
    input[type="submit"]:hover {
        background-color: darkred;
    }
</style>
'''

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_db():
    return psycopg2.connect(
        dbname="delivery_db",
        user="chinatogether",
        password="O99ri1@",
        host="localhost",
        port="5432"
    )

# –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
def clear_table():
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        cursor.execute("TRUNCATE TABLE delivery_test.weight;")
        cursor.execute("TRUNCATE TABLE delivery_test.density;")
        conn.commit()
        print("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {str(e)}")
    finally:
        cursor.close()
        conn.close()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
def load_data_to_db(file_path):
    try:
        weight_data = pd.read_excel(file_path, sheet_name="weight", header=0)
        density_data = pd.read_excel(file_path, sheet_name="density", header=0)

        required_columns_weight = [
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å', '–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –º–µ—à–æ–∫', '–ú–µ—à–æ–∫',
            '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –º–µ—à–æ–∫', '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –º–µ—à–æ–∫', '–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —É–≥–æ–ª–æ–∫',
            '–ö–∞—Ä—Ç–æ–Ω–Ω—ã–µ —É–≥–æ–ª–∫–∏', '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ —É–≥–æ–ª–æ–∫', '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ —É–≥–æ–ª–æ–∫',
            '–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–∞—Ä–∫–∞—Å', '–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –∫–∞—Ä–∫–∞—Å', '–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏ –∫–∞—Ä–∫–∞—Å',
            '–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑–≥—Ä—É–∑–∫–∏ –∫–∞—Ä–∫–∞—Å'
        ]
        required_columns_density = [
            '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å',
            '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', '–ë—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ ($/kg)', '–û–±—ã—á–Ω–æ–µ –∞–≤—Ç–æ($/kg)'
        ]

        missing_weight = [col for col in required_columns_weight if col not in weight_data.columns]
        missing_density = [col for col in required_columns_density if col not in density_data.columns]

        if missing_weight or missing_density:
            raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_weight + missing_density}")

        conn = connect_to_db()
        cursor = conn.cursor()

        weight_rows = [
            tuple(row[col] for col in required_columns_weight)
            for _, row in weight_data.iterrows()
        ]
        cursor.executemany("""
            INSERT INTO delivery_test.weight (
                min_weight, max_weight, coefficient_bag, bag, 
                bag_packing_cost, bag_unloading_cost,
                coefficient_corner, cardboard_corners, 
                corner_packing_cost, corner_unloading_cost,
                coefficient_frame, wooden_frame, 
                frame_packing_cost, frame_unloading_cost
            ) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, weight_rows)

        density_rows = [
            tuple(row[col] for col in required_columns_density)
            for _, row in density_data.iterrows()
        ]
        cursor.executemany("""
            INSERT INTO delivery_test.density (
                category, min_density, max_density, 
                density_range, fast_delivery_cost, regular_delivery_cost
            ) VALUES (%s, %s, %s, %s, %s, %s)
        """, density_rows)

        conn.commit()
        cursor.close()
        conn.close()
        return "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
    except Exception as e:
        conn.rollback()
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    if os.path.exists(LAST_FILE_INFO):
        with open(LAST_FILE_INFO, 'r') as f:
            last_file_info = f.read()
    else:
        last_file_info = "–§–∞–π–ª –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."

    return render_template_string('''
        <!DOCTYPE html>
        <html>
        <head><title>–ì–ª–∞–≤–Ω–∞—è</title>''' + PAGE_STYLE + '''</head>
        <body>
            <h1>–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
            <p><strong>–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:</strong> {{ last_file_info }}</p>
            <form method="post" enctype="multipart/form-data" action="/upload">
                <input type="file" name="file">
                <input type="submit" value="–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª">
            </form>
            <br>
            <a href="/download" class="button">–°–∫–∞—á–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª</a>
            <br><br>
            <a href="/dashboard" class="button">üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
        </body></html>
    ''', last_file_info=last_file_info)

# –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", 400
    file = request.files['file']
    if file.filename == '':
        return "–û—à–∏–±–∫–∞: –∏–º—è —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ", 400

    fixed_filename = "delivery_parameter.xlsx"
    file.save(os.path.join(app.config['UPLOAD_FOLDER'], fixed_filename))

    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    original_name = file.filename
    with open(LAST_FILE_INFO, 'w') as f:
        f.write(f"{original_name} (–∑–∞–≥—Ä—É–∂–µ–Ω {timestamp})")

    clear_table()
    result = load_data_to_db(os.path.join(app.config['UPLOAD_FOLDER'], fixed_filename))

    return f'''
        <html><head><title>–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω</title></head>
        <body style="font-family: Arial; padding: 20px;">
            <h1>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</h1>
            <p>–§–∞–π–ª "{original_name}" —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ "{fixed_filename}".</p>
            <p>{result}</p>
            <a href="/" class="button">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
        </body></html>
    '''

# –ú–∞—Ä—à—Ä—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@app.route('/download')
def download_file():
    fixed_filename = "delivery_parameter.xlsx"
    path = os.path.join(app.config['UPLOAD_FOLDER'], fixed_filename)
    if not os.path.exists(path):
        return f'''
            <html><head><title>–û—à–∏–±–∫–∞</title></head>
            <body style="font-family: Arial; padding: 20px;">
                <h1>–û—à–∏–±–∫–∞</h1>
                <p>–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>
                <a href="/" class="button">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
            </body></html>
        ''', 404
    return send_from_directory(app.config['UPLOAD_FOLDER'], fixed_filename, as_attachment=True)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã weight
def get_weight_data():
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM delivery_test.weight ORDER BY id ASC LIMIT 100")
        columns = [desc[0] for desc in cursor.description]
        rows = cursor.fetchall()
        return {"columns": columns, "rows": rows}
    finally:
        cursor.close()
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã density
def get_density_data():
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM delivery_test.density ORDER BY id ASC LIMIT 100")
        columns = [desc[0] for desc in cursor.description]
        rows = cursor.fetchall()
        return {"columns": columns, "rows": rows}
    finally:
        cursor.close()
        conn.close()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—á–µ—Ç–∞–º
def get_analytics_data():
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT COUNT(*) FROM delivery_test.user_calculation")
        total_calculations = cursor.fetchone()[0]

        cursor.execute("SELECT COUNT(*) FROM delivery_test.user_calculation WHERE created_at >= CURRENT_DATE")
        today_calculations = cursor.fetchone()[0]

        cursor.execute("SELECT AVG(total_weight) FROM delivery_test.user_calculation")
        avg_weight = cursor.fetchone()[0] or 0

        cursor.execute("""
            SELECT category, COUNT(*) as count 
            FROM delivery_test.user_calculation 
            GROUP BY category 
            ORDER BY count DESC 
            LIMIT 1
        """)
        popular_category_data = cursor.fetchone()
        popular_category = popular_category_data[0] if popular_category_data else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        cursor.execute("""
            SELECT COUNT(DISTINCT telegram_user_id) 
            FROM delivery_test.user_calculation 
            WHERE created_at >= CURRENT_DATE - INTERVAL '7 days'
        """)
        active_users = cursor.fetchone()[0]

        return {
            'total_calculations': total_calculations,
            'today_calculations': today_calculations,
            'avg_weight': float(avg_weight),
            'popular_category': popular_category,
            'active_users': active_users
        }
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
        return None
    finally:
        cursor.close()
        conn.close()

# –î–∞—à–±–æ—Ä–¥ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ weight –∏ density + –≥—Ä–∞—Ñ–∏–∫–∏
@app.route('/dashboard')
def dashboard():
    conn = connect_to_db()
    cursor = conn.cursor()

    try:
        # –†–∞—Å—á–µ—Ç—ã –ø–æ –¥–Ω—è–º
        cursor.execute("""
            SELECT DATE(created_at) AS date, COUNT(*) AS count
            FROM delivery_test.user_calculation
            GROUP BY DATE(created_at)
            ORDER BY date DESC
            LIMIT 30
        """)
        calculations_by_day = cursor.fetchall()

        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ä–∞—Å—á–µ—Ç–æ–≤
        cursor.execute("""
            SELECT u.username, COUNT(c.id) AS calculation_count
            FROM delivery_test.telegram_users u
            JOIN delivery_test.user_calculation c ON u.id = c.telegram_user_id
            GROUP BY u.username
            ORDER BY calculation_count DESC
            LIMIT 5
        """)
        calculations_per_user = cursor.fetchall()

        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á–µ—Ç—ã –∑–∞ –Ω–µ–¥–µ–ª—é
        cursor.execute("""
            SELECT u.username, c.category, c.created_at
            FROM delivery_test.user_calculation c
            LEFT JOIN delivery_test.telegram_users u ON c.telegram_user_id = u.id
            WHERE c.created_at >= CURRENT_DATE - INTERVAL '7 days'
            ORDER BY c.created_at DESC
            LIMIT 50
        """)
        recent_calculations = cursor.fetchall()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {str(e)}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö", 500
    finally:
        cursor.close()
        conn.close()

    return render_template('dashboard.html',
                           calculations_by_day=calculations_by_day,
                           calculations_per_user=calculations_per_user,
                           recent_calculations=recent_calculations)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8060)
