import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import BotCommand
from dotenv import load_dotenv
import os
import json
from datetime import datetime, timedelta
import pytz
import psycopg2
from decimal import Decimal
from functools import wraps

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_notifier.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–π –∑–æ–Ω–µ"""
    return datetime.now(MOSCOW_TZ)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_CONFIG = {
    'dbname': os.getenv('DB_NAME', 'delivery_db'),
    'user': os.getenv('DB_USER'), 
    'password': os.getenv('DB_PASSWORD'),
    'host': os.getenv('DB_HOST', 'localhost'),
    'port': os.getenv('DB_PORT', '5432'),
    'connect_timeout': int(os.getenv('DB_TIMEOUT', '10'))
}

def connect_to_db():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        return psycopg2.connect(**DB_CONFIG)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        raise

def handle_db_errors(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__}: {str(e)}")
            return None
    return wrapper

class TelegramNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.token = os.getenv('API_ZAYAVKI_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_NOTIFICATIONS_CHAT_ID')  # ID –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞
        self.admin_chat_ids = os.getenv('TELEGRAM_ADMIN_CHAT_IDS', '').split(',')  # ID –∞–¥–º–∏–Ω–æ–≤
        
        if not self.token:
            raise ValueError("API_ZAYAVKI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        if not self.chat_id:
            logger.warning("TELEGRAM_NOTIFICATIONS_CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        
        self.bot = Bot(token=self.token)
        logger.info(f"TelegramNotifier –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. Chat ID: {self.chat_id}")
    
    async def send_new_order_notification(self, order_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            moscow_time = get_moscow_time()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
            message = (
                f"üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–ö–£–ü</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                f"üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{order_data.get('request_id', 'N/A')}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {order_data.get('telegram_contact', 'N/A')}\n"
                f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_data.get('order_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                f"üìß <b>Email:</b> {order_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('supplier_link'):
                message += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b>\n{order_data['supplier_link'][:100]}{'...' if len(order_data['supplier_link']) > 100 else ''}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('promo_code'):
                message += f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order_data['promo_code']}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('additional_notes'):
                notes = order_data['additional_notes'][:200]
                if len(order_data['additional_notes']) > 200:
                    notes += "..."
                message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{notes}\n\n"
            
nano /home/chinatogether/xlsx-web/telegram_notifier.py            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—á–µ—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_data.get('calculation_id'):
                message += f"üìä <b>–°–≤—è–∑–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b> #{order_data['calculation_id']}\n\n"
            
            message += f"‚è∞ <b>–¢—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è</b>\n"
            message += f"üìû <b>–ì—Ä–∞—Ñ–∏–∫:</b> –ü–ù-–ü–¢ 10:00-18:00 –ú–°–ö"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
            if self.chat_id:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ #{order_data.get('request_id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
            for admin_id in self.admin_chat_ids:
                if admin_id.strip():
                    try:
                        await self.bot.send_message(
                            chat_id=admin_id.strip(),
                            text=message,
                            parse_mode='HTML',
                            disable_web_page_preview=True
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {e}")
            return False
    
    async def send_exchange_rate_update(self, rate_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"""
        try:
            moscow_time = get_moscow_time()
            
            message = (
                f"üí± <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–£–†–°–ê –í–ê–õ–Æ–¢</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                f"üí¥ <b>CNY/USD:</b> {rate_data['rate']} —é–∞–Ω–µ–π –∑–∞ 1$\n"
                f"üìà <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {rate_data.get('source', 'Manual')}\n\n"
                f"‚ÑπÔ∏è <b>–ù–æ–≤—ã–π –∫—É—Ä—Å –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º —Ä–∞—Å—á–µ—Ç–∞–º</b>"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
            if self.chat_id:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='HTML'
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª")
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è
notifier = None

def get_notifier():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —É–≤–µ–¥–æ–º–∏—Ç–µ–ª—è"""
    global notifier
    if notifier is None:
        notifier = TelegramNotifier()
    return notifier

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç
@handle_db_errors
def save_exchange_rate(rate, source="telegram_bot", notes=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç –≤ –ë–î"""
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        moscow_time = get_moscow_time()
        cursor.execute("""
            INSERT INTO delivery_test.exchange_rates (currency_pair, rate, recorded_at, source, notes)
            VALUES (%s, %s, %s, %s, %s)
            RETURNING id
        """, ('CNY/USD', float(rate), moscow_time, source, notes))
        
        rate_id = cursor.fetchone()[0]
        conn.commit()
        logger.info(f"–ö—É—Ä—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {rate} —é–∞–Ω–µ–π –∑–∞ 1$ (ID: {rate_id})")
        return rate_id
        
    finally:
        cursor.close()
        conn.close()

@handle_db_errors
def get_current_exchange_rate():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –∏–∑ –ë–î"""
    conn = connect_to_db()
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT rate, recorded_at, source 
            FROM delivery_test.exchange_rates 
            WHERE currency_pair = 'CNY/USD' 
            ORDER BY recorded_at DESC 
            LIMIT 1
        """)
        
        result = cursor.fetchone()
        if result:
            return {
                'rate': float(result[0]),
                'recorded_at': result[1],
                'source': result[2]
            }
        return None
        
    finally:
        cursor.close()
        conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_order_notification_async(order_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    try:
        notifier = get_notifier()
        return await notifier.send_new_order_notification(order_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {e}")
        return False

async def send_rate_notification_async(rate_data):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ"""
    try:
        notifier = get_notifier()
        return await notifier.send_exchange_rate_update(rate_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ: {e}")
        return False

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Flask
def send_order_notification(order_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(send_order_notification_async(order_data))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ: {e}")
        return False
    finally:
        loop.close()

def send_rate_notification(rate_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ"""
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        return loop.run_until_complete(send_rate_notification_async(rate_data))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–µ: {e}")
        return False
    finally:
        loop.close()

# –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç
class ExchangeRateBot:
    """–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç"""
    
    def __init__(self):
        self.token = os.getenv('API_ZAYAVKI_TOKEN')
        self.admin_chat_ids = [id.strip() for id in os.getenv('TELEGRAM_ADMIN_CHAT_IDS', '').split(',') if id.strip()]
        
        if not self.token:
            raise ValueError("API_ZAYAVKI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.register_handlers()
        logger.info("ExchangeRateBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def is_admin(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return str(user_id) in self.admin_chat_ids
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.dp.message(Command("start"))
        async def start_command(message: types.Message):
            if not self.is_admin(message.from_user.id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            await message.reply(
                "ü§ñ <b>–ë–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç China Together</b>\n\n"
                "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
                "/rate - –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å CNY/USD\n"
                "/setrate 7.20 - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å\n"
                "/history - –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞\n"
                "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n\n"
                "üí° <b>–§–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞:</b> —Å–∫–æ–ª—å–∫–æ —é–∞–Ω–µ–π –∑–∞ 1 –¥–æ–ª–ª–∞—Ä",
                parse_mode='HTML'
            )
        
        @self.dp.message(Command("rate"))
        async def get_rate_command(message: types.Message):
            if not self.is_admin(message.from_user.id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            current_rate = get_current_exchange_rate()
            if current_rate:
                moscow_time = current_rate['recorded_at'].astimezone(MOSCOW_TZ)
                await message.reply(
                    f"üí± <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å CNY/USD</b>\n\n"
                    f"üí¥ <b>–ö—É—Ä—Å:</b> {current_rate['rate']} —é–∞–Ω–µ–π –∑–∞ 1$\n"
                    f"üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
                    f"üìà <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {current_rate['source']}",
                    parse_mode='HTML'
                )
            else:
                await message.reply("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        @self.dp.message(Command("setrate"))
        async def set_rate_command(message: types.Message):
            if not self.is_admin(message.from_user.id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
                args = message.text.split()
                if len(args) < 2:
                    await message.reply(
                        "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
                        "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
                        "/setrate 7.20\n\n"
                        "üí° –£–∫–∞–∂–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —é–∞–Ω–µ–π –∑–∞ 1 –¥–æ–ª–ª–∞—Ä",
                        parse_mode='HTML'
                    )
                    return
                
                new_rate = float(args[1])
                
                if new_rate <= 0 or new_rate > 20:
                    await message.reply("‚ùå –ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –æ—Ç 0 –¥–æ 20.")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å
                rate_id = save_exchange_rate(
                    rate=new_rate,
                    source=f"telegram_admin_{message.from_user.id}",
                    notes=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.first_name or message.from_user.username}"
                )
                
                if rate_id:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    rate_data = {
                        'rate': new_rate,
                        'source': 'Telegram Admin'
                    }
                    await send_rate_notification_async(rate_data)
                    
                    await message.reply(
                        f"‚úÖ <b>–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                        f"üí¥ <b>–ù–æ–≤—ã–π –∫—É—Ä—Å:</b> {new_rate} —é–∞–Ω–µ–π –∑–∞ 1$\n"
                        f"üÜî <b>ID –∑–∞–ø–∏—Å–∏:</b> #{rate_id}\n"
                        f"üìÖ <b>–í—Ä–µ–º—è:</b> {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n\n"
                        f"‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª",
                        parse_mode='HTML'
                    )
                else:
                    await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                
            except ValueError:
                await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.20)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫—É—Ä—Å–∞: {e}")
                await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        @self.dp.message(Command("history"))
        async def history_command(message: types.Message):
            if not self.is_admin(message.from_user.id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            try:
                conn = connect_to_db()
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT rate, recorded_at, source
                    FROM delivery_test.exchange_rates 
                    WHERE currency_pair = 'CNY/USD' 
                    ORDER BY recorded_at DESC 
                    LIMIT 10
                """)
                
                results = cursor.fetchall()
                cursor.close()
                conn.close()
                
                if results:
                    history_text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ CNY/USD (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π)</b>\n\n"
                    for i, (rate, recorded_at, source) in enumerate(results, 1):
                        moscow_time = recorded_at.astimezone(MOSCOW_TZ)
                        history_text += (
                            f"{i}. <b>{rate}</b> —é–∞–Ω–µ–π –∑–∞ 1$ "
                            f"({moscow_time.strftime('%d.%m %H:%M')})\n"
                            f"   üìà {source}\n\n"
                        )
                    
                    await message.reply(history_text, parse_mode='HTML')
                else:
                    await message.reply("üì≠ –ò—Å—Ç–æ—Ä–∏—è –∫—É—Ä—Å–∞ –ø—É—Å—Ç–∞.")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")
        
        @self.dp.message(Command("status"))
        async def status_command(message: types.Message):
            if not self.is_admin(message.from_user.id):
                await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
                return
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
                conn = connect_to_db()
                cursor = conn.cursor()
                cursor.execute("SELECT 1")
                cursor.close()
                conn.close()
                db_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
                current_rate = get_current_exchange_rate()
                
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                conn = connect_to_db()
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT COUNT(*) FROM delivery_test.purchase_requests 
                    WHERE DATE(created_at AT TIME ZONE 'Europe/Moscow') = CURRENT_DATE
                """)
                today_orders = cursor.fetchone()[0]
                cursor.close()
                conn.close()
                
                status_text = (
                    f"ü§ñ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã China Together</b>\n\n"
                    f"üóÑÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_status}\n"
                    f"üí± <b>–ö—É—Ä—Å CNY/USD:</b> {current_rate['rate'] if current_rate else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                    f"üìã <b>–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è:</b> {today_orders}\n"
                    f"üïê <b>–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:</b> {get_moscow_time().strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n\n"
                    f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
                )
                
                await message.reply(status_text, parse_mode='HTML')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            commands = [
                BotCommand(command="rate", description="üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å CNY/USD"),
                BotCommand(command="setrate", description="üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å"),
                BotCommand(command="history", description="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—É—Ä—Å–∞"),
                BotCommand(command="status", description="üîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            ]
            await self.bot.set_my_commands(commands)
            
            logger.info("ü§ñ Exchange Rate Bot –∑–∞–ø—É—â–µ–Ω!")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def run_exchange_rate_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç"""
    bot = ExchangeRateBot()
    await bot.start_polling()

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç
    asyncio.run(run_exchange_rate_bot())
