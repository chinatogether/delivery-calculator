import asyncio
import logging
from aiogram import Bot
import threading
import queue
import time
from dotenv import load_dotenv
import os
from datetime import datetime
import pytz
import concurrent.futures

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    return datetime.now(MOSCOW_TZ)

class NotificationSender:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.token = os.getenv('API_ZAYAVKI_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_NOTIFICATIONS_CHAT_ID')
        self.admin_chat_ids = [id.strip() for id in os.getenv('TELEGRAM_ADMIN_CHAT_IDS', '').split(',') if id.strip()]
        
        if not self.token:
            logger.error("API_ZAYAVKI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º executor –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=2, thread_name_prefix="notification")
        
        logger.info(f"NotificationSender —Å–æ–∑–¥–∞–Ω. Chat ID: {self.chat_id}, Admin IDs: {self.admin_chat_ids}")
    
    def send_order_notification(self, order_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è)"""
        try:
            logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ executor
            future = self.executor.submit(self._send_notification_worker, order_data)
            
            # –ù–ï –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–π
            logger.info(f"–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å: {e}")
            return False
    
    def _send_notification_worker(self, order_data):
        """Worker –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            moscow_time = get_moscow_time()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_order_message(order_data, moscow_time)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                result = asyncio.wait_for(
                    self._send_messages_async(message), 
                    timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                )
                loop.run_until_complete(result)
                
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ #{order_data.get('request_id')} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                return True
                
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
                return False
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}: {e}")
                return False
            finally:
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop
                    pending = asyncio.all_tasks(loop)
                    for task in pending:
                        task.cancel()
                    if pending:
                        loop.run_until_complete(asyncio.gather(*pending, return_exceptions=True))
                except Exception as e:
                    logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ event loop: {e}")
                finally:
                    loop.close()
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ notification worker: {e}")
            return False
    
    def _format_order_message(self, order_data, moscow_time):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
        message = (
            f"üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
            f"üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{order_data.get('request_id', 'N/A')}\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {order_data.get('telegram_contact', 'N/A')}\n"
            f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_data.get('order_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if order_data.get('supplier_link'):
            supplier_link = order_data['supplier_link'][:100]
            if len(order_data['supplier_link']) > 100:
                supplier_link += "..."
            message += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b>\n{supplier_link}\n\n"
        
        if order_data.get('promo_code'):
            message += f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order_data['promo_code']}\n\n"
        
        if order_data.get('additional_notes'):
            notes = order_data['additional_notes'][:200]
            if len(order_data['additional_notes']) > 200:
                notes += "..."
            message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{notes}\n\n"
        
        if order_data.get('calculation_id'):
            message += f"üìä <b>–°–≤—è–∑–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b> #{order_data['calculation_id']}\n\n"
        
        
        return message
    
    async def _send_messages_async(self, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å retry –ª–æ–≥–∏–∫–æ–π"""
        bot = Bot(token=self.token)
        
        try:
            success_count = 0
            total_attempts = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
            if self.chat_id:
                total_attempts += 1
                try:
                    await bot.send_message(
                        chat_id=self.chat_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    success_count += 1
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {self.chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É {self.chat_id}: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
            for admin_id in self.admin_chat_ids:
                if admin_id:
                    total_attempts += 1
                    try:
                        await bot.send_message(
                            chat_id=admin_id,
                            text=message,
                            parse_mode='HTML',
                            disable_web_page_preview=True
                        )
                        success_count += 1
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {success_count}/{total_attempts} —É—Å–ø–µ—à–Ω–æ")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            return success_count > 0
            
        finally:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
            try:
                await bot.session.close()
            except Exception as e:
                logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞: {e}")
    
    def send_order_notification_sync_fallback(self, order_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è fallback –≤–µ—Ä—Å–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤"""
        try:
            logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
            
            future = self.executor.submit(self._send_notification_worker, order_data)
            # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            result = future.result(timeout=10)
            
            if result:
                logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
            else:
                logger.error(f"‚ùå –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
            
            return result
            
        except concurrent.futures.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False
    
    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            "token_configured": bool(self.token),
            "chat_id_configured": bool(self.chat_id),
            "admin_ids_count": len(self.admin_chat_ids),
            "executor_active": not self.executor._shutdown,
            "admin_ids": self.admin_chat_ids
        }
    
    def __del__(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ executor –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        try:
            if hasattr(self, 'executor') and self.executor:
                self.executor.shutdown(wait=False)
        except Exception as e:
            logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ executor: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
notification_sender = None

def get_notification_sender():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_sender
    if notification_sender is None:
        notification_sender = NotificationSender()
    return notification_sender

def send_order_notification(order_data):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    try:
        sender = get_notification_sender()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        status = sender.get_status()
        if not status["token_configured"]:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        if not status["chat_id_configured"] and not status["admin_ids_count"]:
            logger.error("‚ùå –ù–∏ chat_id, –Ω–∏ admin_ids –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞—è–≤–∫–∏ #{order_data.get('request_id')}")
        logger.info(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: chat_id={bool(sender.chat_id)}, admin_count={len(sender.admin_chat_ids)}")
        
        return sender.send_order_notification(order_data)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def send_order_notification_sync(order_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤)"""
    try:
        sender = get_notification_sender()
        return sender.send_order_notification_sync_fallback(order_data)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def test_notification_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    test_data = {
        'request_id': 999999,
        'telegram_contact': '@test_user',
        'email': 'test@example.com',
        'order_amount': '5000-10000 —é–∞–Ω–µ–π',
        'supplier_link': 'https://example.com/product',
        'promo_code': 'TEST2024',
        'additional_notes': '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        'calculation_id': 12345,
        'telegram_id': 'test123',
        'username': 'test_user'
    }
    
    logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    result = send_order_notification(test_data)
    logger.info(f"üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {'‚úÖ –£—Å–ø–µ—Ö' if result else '‚ùå –ù–µ—É–¥–∞—á–∞'}")
    return result

if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_notification_system()
    time.sleep(5)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
