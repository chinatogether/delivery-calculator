import asyncio
import logging
from aiogram import Bot
import threading
import queue
import time
from dotenv import load_dotenv
import os
from datetime import datetime
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

def get_moscow_time():
    return datetime.now(MOSCOW_TZ)

class NotificationSender:
    """–ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–µ–∑ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤"""
    
    def __init__(self):
        self.token = os.getenv('API_ZAYAVKI_TOKEN')
        self.chat_id = os.getenv('TELEGRAM_NOTIFICATIONS_CHAT_ID')
        self.admin_chat_ids = [id.strip() for id in os.getenv('TELEGRAM_ADMIN_CHAT_IDS', '').split(',') if id.strip()]
        
        if not self.token:
            logger.error("API_ZAYAVKI_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        self.bot = Bot(token=self.token)
        logger.info(f"NotificationSender —Å–æ–∑–¥–∞–Ω. Chat ID: {self.chat_id}")
    
    def send_order_notification(self, order_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
        try:
            moscow_time = get_moscow_time()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = (
                f"üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {moscow_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n"
                f"üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{order_data.get('request_id', 'N/A')}\n"
                f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {order_data.get('telegram_contact', 'N/A')}\n"
                f"üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> {order_data.get('order_amount', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if order_data.get('supplier_link'):
                message += f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä:</b>\n{order_data['supplier_link'][:100]}{'...' if len(order_data['supplier_link']) > 100 else ''}\n\n"
            
            if order_data.get('promo_code'):
                message += f"üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {order_data['promo_code']}\n\n"
            
            if order_data.get('additional_notes'):
                notes = order_data['additional_notes'][:200]
                if len(order_data['additional_notes']) > 200:
                    notes += "..."
                message += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</b>\n{notes}\n\n"
            
            if order_data.get('calculation_id'):
                message += f"üìä <b>–°–≤—è–∑–∞–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç:</b> #{order_data['calculation_id']}\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π event loop
            def send_async():
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                try:
                    loop.run_until_complete(self._send_messages(message))
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ #{order_data.get('request_id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                    return False
                finally:
                    loop.close()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(target=send_async, daemon=True)
            thread.start()
            thread.join(timeout=10)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def _send_messages(self, message):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É
        if self.chat_id:
            try:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {self.chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in self.admin_chat_ids:
            if admin_id:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=message,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
notification_sender = None

def get_notification_sender():
    global notification_sender
    if notification_sender is None:
        notification_sender = NotificationSender()
    return notification_sender

def send_order_notification(order_data):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ"""
    try:
        sender = get_notification_sender()
        return sender.send_order_notification(order_data)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False
